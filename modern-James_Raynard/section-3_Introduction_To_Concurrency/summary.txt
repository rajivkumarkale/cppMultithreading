1. Multithreading with c++11
    => Prior to C++11, pthread library was used.
    => C++11 introduced std::thread class, which is portable, very low level, just a wrapper of software thread.
        -> C++14
            . Read-write locks
        -> C++17
            . Many standard algorithms can execute in parallel.
        -> C++20
            . Joining threads
            . Thread cancellation
            . Coroutines, semaphores, latches and barriers
        -> C++23
            . Improved support for coroutines 

2. Launching a thread
    => #include <thread>
    => constructor starts a new execution thread, this will execute immediately.

    => Thread Entry Point:
        -> std::thread's constructor takes a callable object.
            i.e. the thread's entry point function

        -> The execution thread will invoke this function.
        -> The entry point function:
            -> can be any callable object.
            -> cannot be overloaded.
            -> any return value is ignored.
        
3. Thread Termination
    => The parent thread completes its execution
        -> The std::thread object goes out of scope.
        -> Its destructor is called.
    
    => This can happend while the child is still running
        -> by default, the destructor calls std::terminate()
        -> This terminates all threads, including main().

============================================================
#include <iostream>
#include <thread>

void hello_world() { std::cout << "Hello World from Thread! " << std::endl; }

int main() {
    std::thread thread1(hello_world);

    return 0;
}

---------------------------

=> The above program contains an issue related to proper thread management.

=> Program Overview:
    1. hello_world Function:
        A simple function that prints "Hello World from Thread!".

    2. std::thread thread1(hello_world);:
        A thread object is created (thread1) that runs the hello_world function in parallel with the main thread.

    3. End of main():
        The main() function reaches the end and returns immediately.
    
=> Problem : Missing Thread Join or Detach
    -> When creating a thread (std::thread), you must either:
        1. Join the thread (thread1.join()): This makes the main thread wait for thread1 to finish execution before proceeding.
        2. Detach the thread (thread1.detach()): This allows thread1 to execute independently, even if main() finishes.

    -> In this program, neither join() nor detach() is called, causing undefined behavior when the main function ends.

=> Possible Outcomes:
    -> Crash or Undefined Behavior: 
        The std::thread destructor will be called as the thread1 object goes out of scope when main() ends. 
        If the thread is still joinable (not joined or detached), the program will terminate with std::terminate().

    -> Successful Execution (Unlikely): 
        If the thread happens to finish its execution before main() ends, it might work, but this is unreliable and non-deterministic.
----------------

=> The Life Cycle of a std::thread Object
    1. Creating a Thread:
        ->  When we create a thread object like std::thread thread1(hello_world);, 
            the operating system spawns a new thread to execute the function hello_world().
    
    2. Thread's Joinable State:
        -> A thread is considered joinable if it has been started but neither join() nor detach() has been called.
        -> The thread remains in this state until explicitly managed (joined or detached).
    
    3. std::thread Destructor:
        -> When a std::thread object (like thread1) goes out of scope, its destructor is called.
        -> Before destroying the thread object, the destructor checks if the thread is still in the joinable state.

=> What Happens if the Thread is Still Joinable?
    -> Undefined Behavior:
        -> If the std::thread object is destroyed while the thread is joinable, 
           it results in undefined behavior because the thread might still be running or waiting to execute.

    -> Guaranteed Program Termination:
        -> To avoid undefined behavior, the C++ standard library enforces a fail-safe: 
           If a thread is joinable when its destructor is invoked, the program calls std::terminate(), which abruptly ends the program. 
           This is a safety mechanism to prevent resource leaks or race conditions.

=> Why Does This Happen?
    -> Threads represent system resources, and leaving a thread running when its std::thread object is destroyed can cause issues:
        1. Resource Leaks: The OS thread resources won't be cleaned up properly.
        2. Race Conditions: The thread might access resources that are no longer valid, leading to unpredictable behavior.
    
    -> By enforcing this rule, the C++ standard ensures the programmer explicitly manages the thread lifecycle.

-------------
=> Key Effects of Calling detach()
    1. Thread Ownership is Released:
        -> The std::thread object no longer manages the thread. The thread becomes a "detached thread."
        -> The operating system takes over the responsibility for the detached thread's lifecycle.
    
    2. Independent Execution:
        -> The detached thread will run independently until it completes its execution.
        -> It is not tied to the lifetime of the std::thread object or the main program.

    3. Resource Management:
        -> Once the detached thread finishes, the operating system automatically reclaims its resources (like thread handles, memory, etc.).

=> Consequences of Detaching a Thread
    => Pros:
        -> No Waiting:
            . The main thread doesn't have to wait for the detached thread to complete, enabling parallelism without blocking.
        -> Simplicity:
            . No need to explicitly manage the thread's completion using join().
    => Cons:
        -> No Control:
            . After detaching, you cannot interact with the thread (e.g., you can't wait for it to finish or check its state).
        -> Risk of Undefined Behavior:
            . If the detached thread tries to access resources (e.g., variables or objects) that are destroyed when main() or another thread finishes, 
               it may lead to crashes or undefined behavior (e.g., dangling pointers, race conditions).
        -> Harder Debugging:
            . Debugging detached threads can be challenging because they execute independently, and it's difficult to trace their state after detachment.

=> Important Notes:
    1. Ensure Safe Access:
        -> Detached threads should not access variables or objects in the main thread unless you can guarantee their validity (e.g., using dynamic memory or proper synchronization).
    2. Program Termination:
        -> If the main thread finishes before the detached thread completes, the program exits regardless of the detached thread's status.
    3. Use Cases for detach():
        -> Suitable for tasks where you don't need to synchronize or interact with the thread after starting it, such as background logging or cleanup.
    
    => In general, use detach() sparingly and only when you're sure the detached thread won't outlive its resources or create undefined behavior.


======================== 

=> Threads with arguments:
    -> We can pass arguments to the entry point function.
    -> We list them as extra arguments to the constructor.
    -> e.g.
        // Thread entry point function
        void hello(std::string);

        // hello() takes a string arguments
        std::thread thread1(hello, "Hello, Thread!");

    -> The std::thread object owns the arguments 
        -> lvalue arguments are passed by value.
        -> rvalue arguments are passed by move.

    -> To pass by move, we must provide an rvale.
        -> The argument must have a move constructor 

        // Callabel object - thread entry point 
        void func(std::string &&);

        std::string str = "abc";

        // wrap the argument in a call to std::move 
        std::thread thread2(func, std::move(str));

=> Thread Function with reference argument.
    -> When we pass arguments to a thread's constructor, they are copied by default. 
       This ensures the callable object (and its arguments) are valid for the lifetime of the thread.

    -> Even if we use & in the thread function's parameter, the argument will still be copied by value when you pass it to the thread constructor, unless you explicitly use std::ref() or std::cref().
        if we directly pass variable , then it will be error.
        This behavior occurs because the std::thread constructor always attempts to make a copy (or move) of the arguments you pass to it to ensure they are valid for the thread's lifetime.
    
    -> use a reference wrapper.
        -> wrap the argument in a call to std::ref()
        // callable object-thread entry point 
        void hello(std::string &);

        std::string str="abc";

        //wrap the arguement in a call to std::ref()
        std::thread thread3(hello, std::ref(str));
    
    -> use std::cref() for a const reference 
    -> Be aware of dangling references!
        When using std::ref() or std::cref(), ensure that the referenced object outlives the thread's execution. 
        Otherwise, you'll have a dangling reference, which leads to undefined behavior.

        e.g. 
            void hello(std::string& str) {
                std::cout << "Thread received: " << str << std::endl;
            }

            int main() {
                std::thread thread3;
                {
                    std::string str = "Hello";
                    thread3 = std::thread(hello, std::ref(str)); // str goes out of scope
                }
                thread3.join(); // Undefined behavior: str no longer exists
                return 0;
            }

=> Member functions as Entry Point:
    -> We can use a member function as the entry point
    -> Requires an object of the class.
    -> e.g.
        class Greeter {
        public:
            void hello() { std::cout << "hello from member function" << std::endl; }
        };

        // Pass a pointer to the member function and a pointer to the object.
        Greeter greet;
        std::thread thread6(&Greeter::hello, &greet);

=> lambda expression as entry point:
    int i= 3;

    // capture by reference
    std::thread thr([&i](){
        i*=2;
    });
    thr.join();
    std::cout << "i: " << i << std::endl; // 6

=> we can pass argument to lambda expression:
    std::thread thr(
        [](int i1, int i2){
            std::cout << i1 + i2 << std::endl;
        },

        // The remaining arguments are passed to the lambda expression;
        2, 3
    );

=======================================================================

=> Multi-threaded Program is run on the computer with single processor by "time slicing".

=> Thread scheduling:
    -> Threds may start in any order.
    -> A thread may be interrupted at any time.
    -> A thread may be restarted at any time.
    -> While a thread is sleeping, another thread may run:
        -> This can run the same code as the inactive thread.
        -> It can access data which it shares with the inactive thread.

=> Disadvantages of Time Slicing:
    -> Requires a "context switch"
    -> Save the processor state for the current thread
        -> current values of the processor register.
        -> Program's intstruction pointer.
    -> Load the saved processor state for the next thread.
        -> Values of processor register when stopped, etc.
        -> May also have to reload the thread's instructions and data.
    
    -> The processor can not execute any instructions during a context switch.

    -> Why Context Switches Are Expensive
        -> CPU Idle Time: During a context switch, the CPU is not executing useful instructions. Instead, it is saving and restoring states.
        -> Cache Flush: Switching threads may invalidate parts of the CPU cache, forcing the processor to reload data, which is time-consuming.
        -> Memory Overhead: The kernel must maintain additional data structures (e.g., TCBs, queues) for managing threads.
        -> Hardware Constraints: Some registers (e.g., SIMD, floating-point) may require more time to save and restore due to their size.
